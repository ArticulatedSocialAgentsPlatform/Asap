// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rsb/protocol/EventMetaData.proto

#ifndef PROTOBUF_rsb_2fprotocol_2fEventMetaData_2eproto__INCLUDED
#define PROTOBUF_rsb_2fprotocol_2fEventMetaData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rsb {
namespace protocol {

// Internal implementation detail -- do not call these.
void RSB_PROTOCOL_EXPORT protobuf_AddDesc_rsb_2fprotocol_2fEventMetaData_2eproto();
void protobuf_AssignDesc_rsb_2fprotocol_2fEventMetaData_2eproto();
void protobuf_ShutdownFile_rsb_2fprotocol_2fEventMetaData_2eproto();

class UserTime;
class UserInfo;
class EventMetaData;

// ===================================================================

class RSB_PROTOCOL_EXPORT UserTime : public ::google::protobuf::Message {
 public:
  UserTime();
  virtual ~UserTime();

  UserTime(const UserTime& from);

  inline UserTime& operator=(const UserTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserTime& default_instance();

  void Swap(UserTime* other);

  // implements Message ----------------------------------------------

  UserTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserTime& from);
  void MergeFrom(const UserTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required uint64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rsb.protocol.UserTime)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::google::protobuf::uint64 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void RSB_PROTOCOL_EXPORT protobuf_AddDesc_rsb_2fprotocol_2fEventMetaData_2eproto();
  friend void protobuf_AssignDesc_rsb_2fprotocol_2fEventMetaData_2eproto();
  friend void protobuf_ShutdownFile_rsb_2fprotocol_2fEventMetaData_2eproto();

  void InitAsDefaultInstance();
  static UserTime* default_instance_;
};
// -------------------------------------------------------------------

class RSB_PROTOCOL_EXPORT UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:rsb.protocol.UserInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void RSB_PROTOCOL_EXPORT protobuf_AddDesc_rsb_2fprotocol_2fEventMetaData_2eproto();
  friend void protobuf_AssignDesc_rsb_2fprotocol_2fEventMetaData_2eproto();
  friend void protobuf_ShutdownFile_rsb_2fprotocol_2fEventMetaData_2eproto();

  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class RSB_PROTOCOL_EXPORT EventMetaData : public ::google::protobuf::Message {
 public:
  EventMetaData();
  virtual ~EventMetaData();

  EventMetaData(const EventMetaData& from);

  inline EventMetaData& operator=(const EventMetaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventMetaData& default_instance();

  void Swap(EventMetaData* other);

  // implements Message ----------------------------------------------

  EventMetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventMetaData& from);
  void MergeFrom(const EventMetaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 create_time = 2;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  inline ::google::protobuf::int64 create_time() const;
  inline void set_create_time(::google::protobuf::int64 value);

  // required int64 send_time = 3;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 3;
  inline ::google::protobuf::int64 send_time() const;
  inline void set_send_time(::google::protobuf::int64 value);

  // optional int64 receive_time = 4;
  inline bool has_receive_time() const;
  inline void clear_receive_time();
  static const int kReceiveTimeFieldNumber = 4;
  inline ::google::protobuf::int64 receive_time() const;
  inline void set_receive_time(::google::protobuf::int64 value);

  // optional int64 deliver_time = 5;
  inline bool has_deliver_time() const;
  inline void clear_deliver_time();
  static const int kDeliverTimeFieldNumber = 5;
  inline ::google::protobuf::int64 deliver_time() const;
  inline void set_deliver_time(::google::protobuf::int64 value);

  // repeated .rsb.protocol.UserTime user_times = 6;
  inline int user_times_size() const;
  inline void clear_user_times();
  static const int kUserTimesFieldNumber = 6;
  inline const ::rsb::protocol::UserTime& user_times(int index) const;
  inline ::rsb::protocol::UserTime* mutable_user_times(int index);
  inline ::rsb::protocol::UserTime* add_user_times();
  inline const ::google::protobuf::RepeatedPtrField< ::rsb::protocol::UserTime >&
      user_times() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsb::protocol::UserTime >*
      mutable_user_times();

  // repeated .rsb.protocol.UserInfo user_infos = 7;
  inline int user_infos_size() const;
  inline void clear_user_infos();
  static const int kUserInfosFieldNumber = 7;
  inline const ::rsb::protocol::UserInfo& user_infos(int index) const;
  inline ::rsb::protocol::UserInfo* mutable_user_infos(int index);
  inline ::rsb::protocol::UserInfo* add_user_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rsb::protocol::UserInfo >&
      user_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsb::protocol::UserInfo >*
      mutable_user_infos();

  // @@protoc_insertion_point(class_scope:rsb.protocol.EventMetaData)
 private:
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_receive_time();
  inline void clear_has_receive_time();
  inline void set_has_deliver_time();
  inline void clear_has_deliver_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 send_time_;
  ::google::protobuf::int64 receive_time_;
  ::google::protobuf::int64 deliver_time_;
  ::google::protobuf::RepeatedPtrField< ::rsb::protocol::UserTime > user_times_;
  ::google::protobuf::RepeatedPtrField< ::rsb::protocol::UserInfo > user_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void RSB_PROTOCOL_EXPORT protobuf_AddDesc_rsb_2fprotocol_2fEventMetaData_2eproto();
  friend void protobuf_AssignDesc_rsb_2fprotocol_2fEventMetaData_2eproto();
  friend void protobuf_ShutdownFile_rsb_2fprotocol_2fEventMetaData_2eproto();

  void InitAsDefaultInstance();
  static EventMetaData* default_instance_;
};
// ===================================================================


// ===================================================================

// UserTime

// required bytes key = 1;
inline bool UserTime::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserTime::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserTime::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserTime::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& UserTime::key() const {
  return *key_;
}
inline void UserTime::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void UserTime::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void UserTime::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserTime::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* UserTime::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserTime::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 timestamp = 2;
inline bool UserTime::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserTime::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserTime::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserTime::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 UserTime::timestamp() const {
  return timestamp_;
}
inline void UserTime::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// UserInfo

// required bytes key = 1;
inline bool UserInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& UserInfo::key() const {
  return *key_;
}
inline void UserInfo::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void UserInfo::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void UserInfo::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* UserInfo::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserInfo::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool UserInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& UserInfo::value() const {
  return *value_;
}
inline void UserInfo::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void UserInfo::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void UserInfo::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* UserInfo::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserInfo::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EventMetaData

// required int64 create_time = 2;
inline bool EventMetaData::has_create_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventMetaData::set_has_create_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventMetaData::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventMetaData::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::int64 EventMetaData::create_time() const {
  return create_time_;
}
inline void EventMetaData::set_create_time(::google::protobuf::int64 value) {
  set_has_create_time();
  create_time_ = value;
}

// required int64 send_time = 3;
inline bool EventMetaData::has_send_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventMetaData::set_has_send_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventMetaData::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventMetaData::clear_send_time() {
  send_time_ = GOOGLE_LONGLONG(0);
  clear_has_send_time();
}
inline ::google::protobuf::int64 EventMetaData::send_time() const {
  return send_time_;
}
inline void EventMetaData::set_send_time(::google::protobuf::int64 value) {
  set_has_send_time();
  send_time_ = value;
}

// optional int64 receive_time = 4;
inline bool EventMetaData::has_receive_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventMetaData::set_has_receive_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventMetaData::clear_has_receive_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventMetaData::clear_receive_time() {
  receive_time_ = GOOGLE_LONGLONG(0);
  clear_has_receive_time();
}
inline ::google::protobuf::int64 EventMetaData::receive_time() const {
  return receive_time_;
}
inline void EventMetaData::set_receive_time(::google::protobuf::int64 value) {
  set_has_receive_time();
  receive_time_ = value;
}

// optional int64 deliver_time = 5;
inline bool EventMetaData::has_deliver_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventMetaData::set_has_deliver_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventMetaData::clear_has_deliver_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventMetaData::clear_deliver_time() {
  deliver_time_ = GOOGLE_LONGLONG(0);
  clear_has_deliver_time();
}
inline ::google::protobuf::int64 EventMetaData::deliver_time() const {
  return deliver_time_;
}
inline void EventMetaData::set_deliver_time(::google::protobuf::int64 value) {
  set_has_deliver_time();
  deliver_time_ = value;
}

// repeated .rsb.protocol.UserTime user_times = 6;
inline int EventMetaData::user_times_size() const {
  return user_times_.size();
}
inline void EventMetaData::clear_user_times() {
  user_times_.Clear();
}
inline const ::rsb::protocol::UserTime& EventMetaData::user_times(int index) const {
  return user_times_.Get(index);
}
inline ::rsb::protocol::UserTime* EventMetaData::mutable_user_times(int index) {
  return user_times_.Mutable(index);
}
inline ::rsb::protocol::UserTime* EventMetaData::add_user_times() {
  return user_times_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsb::protocol::UserTime >&
EventMetaData::user_times() const {
  return user_times_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsb::protocol::UserTime >*
EventMetaData::mutable_user_times() {
  return &user_times_;
}

// repeated .rsb.protocol.UserInfo user_infos = 7;
inline int EventMetaData::user_infos_size() const {
  return user_infos_.size();
}
inline void EventMetaData::clear_user_infos() {
  user_infos_.Clear();
}
inline const ::rsb::protocol::UserInfo& EventMetaData::user_infos(int index) const {
  return user_infos_.Get(index);
}
inline ::rsb::protocol::UserInfo* EventMetaData::mutable_user_infos(int index) {
  return user_infos_.Mutable(index);
}
inline ::rsb::protocol::UserInfo* EventMetaData::add_user_infos() {
  return user_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsb::protocol::UserInfo >&
EventMetaData::user_infos() const {
  return user_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsb::protocol::UserInfo >*
EventMetaData::mutable_user_infos() {
  return &user_infos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace rsb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rsb_2fprotocol_2fEventMetaData_2eproto__INCLUDED
