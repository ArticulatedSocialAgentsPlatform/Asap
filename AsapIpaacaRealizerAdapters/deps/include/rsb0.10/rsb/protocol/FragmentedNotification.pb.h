// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rsb/protocol/FragmentedNotification.proto

#ifndef PROTOBUF_rsb_2fprotocol_2fFragmentedNotification_2eproto__INCLUDED
#define PROTOBUF_rsb_2fprotocol_2fFragmentedNotification_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rsb/protocol/Notification.pb.h"
// @@protoc_insertion_point(includes)

namespace rsb {
namespace protocol {

// Internal implementation detail -- do not call these.
void RSB_PROTOCOL_EXPORT protobuf_AddDesc_rsb_2fprotocol_2fFragmentedNotification_2eproto();
void protobuf_AssignDesc_rsb_2fprotocol_2fFragmentedNotification_2eproto();
void protobuf_ShutdownFile_rsb_2fprotocol_2fFragmentedNotification_2eproto();

class FragmentedNotification;

// ===================================================================

class RSB_PROTOCOL_EXPORT FragmentedNotification : public ::google::protobuf::Message {
 public:
  FragmentedNotification();
  virtual ~FragmentedNotification();

  FragmentedNotification(const FragmentedNotification& from);

  inline FragmentedNotification& operator=(const FragmentedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FragmentedNotification& default_instance();

  void Swap(FragmentedNotification* other);

  // implements Message ----------------------------------------------

  FragmentedNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FragmentedNotification& from);
  void MergeFrom(const FragmentedNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .rsb.protocol.Notification notification = 1;
  inline bool has_notification() const;
  inline void clear_notification();
  static const int kNotificationFieldNumber = 1;
  inline const ::rsb::protocol::Notification& notification() const;
  inline ::rsb::protocol::Notification* mutable_notification();
  inline ::rsb::protocol::Notification* release_notification();
  inline void set_allocated_notification(::rsb::protocol::Notification* notification);

  // required uint32 num_data_parts = 2 [default = 1];
  inline bool has_num_data_parts() const;
  inline void clear_num_data_parts();
  static const int kNumDataPartsFieldNumber = 2;
  inline ::google::protobuf::uint32 num_data_parts() const;
  inline void set_num_data_parts(::google::protobuf::uint32 value);

  // required uint32 data_part = 3 [default = 0];
  inline bool has_data_part() const;
  inline void clear_data_part();
  static const int kDataPartFieldNumber = 3;
  inline ::google::protobuf::uint32 data_part() const;
  inline void set_data_part(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rsb.protocol.FragmentedNotification)
 private:
  inline void set_has_notification();
  inline void clear_has_notification();
  inline void set_has_num_data_parts();
  inline void clear_has_num_data_parts();
  inline void set_has_data_part();
  inline void clear_has_data_part();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rsb::protocol::Notification* notification_;
  ::google::protobuf::uint32 num_data_parts_;
  ::google::protobuf::uint32 data_part_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void RSB_PROTOCOL_EXPORT protobuf_AddDesc_rsb_2fprotocol_2fFragmentedNotification_2eproto();
  friend void protobuf_AssignDesc_rsb_2fprotocol_2fFragmentedNotification_2eproto();
  friend void protobuf_ShutdownFile_rsb_2fprotocol_2fFragmentedNotification_2eproto();

  void InitAsDefaultInstance();
  static FragmentedNotification* default_instance_;
};
// ===================================================================


// ===================================================================

// FragmentedNotification

// required .rsb.protocol.Notification notification = 1;
inline bool FragmentedNotification::has_notification() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FragmentedNotification::set_has_notification() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FragmentedNotification::clear_has_notification() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FragmentedNotification::clear_notification() {
  if (notification_ != NULL) notification_->::rsb::protocol::Notification::Clear();
  clear_has_notification();
}
inline const ::rsb::protocol::Notification& FragmentedNotification::notification() const {
  return notification_ != NULL ? *notification_ : *default_instance_->notification_;
}
inline ::rsb::protocol::Notification* FragmentedNotification::mutable_notification() {
  set_has_notification();
  if (notification_ == NULL) notification_ = new ::rsb::protocol::Notification;
  return notification_;
}
inline ::rsb::protocol::Notification* FragmentedNotification::release_notification() {
  clear_has_notification();
  ::rsb::protocol::Notification* temp = notification_;
  notification_ = NULL;
  return temp;
}
inline void FragmentedNotification::set_allocated_notification(::rsb::protocol::Notification* notification) {
  delete notification_;
  notification_ = notification;
  if (notification) {
    set_has_notification();
  } else {
    clear_has_notification();
  }
}

// required uint32 num_data_parts = 2 [default = 1];
inline bool FragmentedNotification::has_num_data_parts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FragmentedNotification::set_has_num_data_parts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FragmentedNotification::clear_has_num_data_parts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FragmentedNotification::clear_num_data_parts() {
  num_data_parts_ = 1u;
  clear_has_num_data_parts();
}
inline ::google::protobuf::uint32 FragmentedNotification::num_data_parts() const {
  return num_data_parts_;
}
inline void FragmentedNotification::set_num_data_parts(::google::protobuf::uint32 value) {
  set_has_num_data_parts();
  num_data_parts_ = value;
}

// required uint32 data_part = 3 [default = 0];
inline bool FragmentedNotification::has_data_part() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FragmentedNotification::set_has_data_part() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FragmentedNotification::clear_has_data_part() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FragmentedNotification::clear_data_part() {
  data_part_ = 0u;
  clear_has_data_part();
}
inline ::google::protobuf::uint32 FragmentedNotification::data_part() const {
  return data_part_;
}
inline void FragmentedNotification::set_data_part(::google::protobuf::uint32 value) {
  set_has_data_part();
  data_part_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace rsb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rsb_2fprotocol_2fFragmentedNotification_2eproto__INCLUDED
