/* ============================================================
 *
 * This file is a part of the RSB project
 *
 * Copyright (C) 2010 by Sebastian Wrede <swrede at techfak dot uni-bielefeld dot de>
 *
 * This file may be licensed under the terms of the
 * GNU Lesser General Public License Version 3 (the ``LGPL''),
 * or (at your option) any later version.
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the LGPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the LGPL along with this
 * program. If not, go to http://www.gnu.org/licenses/lgpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 * The development of this software was supported by:
 *   CoR-Lab, Research Institute for Cognition and Robotics
 *     Bielefeld University
 *
 * ============================================================ */

#pragma once

#include <boost/shared_ptr.hpp>

#include "rsb/rsbexports.h"
#include "rsb/protocol/Notification.pb.h"

namespace rsb {

class EventId;

class Event;
typedef boost::shared_ptr<Event> EventPtr;

namespace protocol {

typedef boost::shared_ptr<rsb::protocol::Notification> NotificationPtr;

/**
 * Fills the notification with minimal information required to identify it
 * along several notifications sent on a wire. Namely, this is the EventId
 * contained in the notification.
 *
 * @param notification the notification to fill
 * @param event the event to take then information from
 */
RSB_EXPORT void fillNotificationId(protocol::Notification& notification,
        const EventPtr& event);

/**
 * Fills a protocol::Notification with header contents. This includes meta
 * data and causal vector but excludes the id information. These can be set
 * with #fillNotificationId.
 *
 * @param notification notification to fill
 * @param event the event that generated the notification
 * @param wireSchema wire schema of the serialized data
 */
RSB_EXPORT void fillNotificationHeader(protocol::Notification& notification,
        const EventPtr& event, const std::string& wireSchema);

/**
 * Utility function to fill a protocol::EventId.
 *
 * @param id the id to fill
 * @param realId the source id
 */
RSB_EXPORT void fillEventId(protocol::EventId& id, const rsb::EventId& realId);

/**
 * Parses the data from a protocol::Notification and fills an event with these
 * data.
 *
 * @param event event to fill
 * @param notification notification to read data from
 * @param data the decoded event data, probably generated by a Converter
 * @param dataType the string identifier of the data type
 */
RSB_EXPORT void fillEvent(EventPtr event,
        const rsb::protocol::Notification& notification,
        boost::shared_ptr<void> data, const std::string& dataType);

}
}

