// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rsb/protocol/Notification.proto

#ifndef PROTOBUF_rsb_2fprotocol_2fNotification_2eproto__INCLUDED
#define PROTOBUF_rsb_2fprotocol_2fNotification_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rsb/protocol/EventId.pb.h"
#include "rsb/protocol/EventMetaData.pb.h"
// @@protoc_insertion_point(includes)

namespace rsb {
namespace protocol {

// Internal implementation detail -- do not call these.
void RSB_PROTOCOL_EXPORT protobuf_AddDesc_rsb_2fprotocol_2fNotification_2eproto();
void protobuf_AssignDesc_rsb_2fprotocol_2fNotification_2eproto();
void protobuf_ShutdownFile_rsb_2fprotocol_2fNotification_2eproto();

class Notification;

// ===================================================================

class RSB_PROTOCOL_EXPORT Notification : public ::google::protobuf::Message {
 public:
  Notification();
  virtual ~Notification();

  Notification(const Notification& from);

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notification& default_instance();

  void Swap(Notification* other);

  // implements Message ----------------------------------------------

  Notification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .rsb.protocol.EventId event_id = 108;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 108;
  inline const ::rsb::protocol::EventId& event_id() const;
  inline ::rsb::protocol::EventId* mutable_event_id();
  inline ::rsb::protocol::EventId* release_event_id();
  inline void set_allocated_event_id(::rsb::protocol::EventId* event_id);

  // optional bytes scope = 6;
  inline bool has_scope() const;
  inline void clear_scope();
  static const int kScopeFieldNumber = 6;
  inline const ::std::string& scope() const;
  inline void set_scope(const ::std::string& value);
  inline void set_scope(const char* value);
  inline void set_scope(const void* value, size_t size);
  inline ::std::string* mutable_scope();
  inline ::std::string* release_scope();
  inline void set_allocated_scope(::std::string* scope);

  // optional bytes method = 14 [default = ""];
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 14;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const void* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // optional bytes wire_schema = 7;
  inline bool has_wire_schema() const;
  inline void clear_wire_schema();
  static const int kWireSchemaFieldNumber = 7;
  inline const ::std::string& wire_schema() const;
  inline void set_wire_schema(const ::std::string& value);
  inline void set_wire_schema(const char* value);
  inline void set_wire_schema(const void* value, size_t size);
  inline ::std::string* mutable_wire_schema();
  inline ::std::string* release_wire_schema();
  inline void set_allocated_wire_schema(::std::string* wire_schema);

  // optional bytes data = 9;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 9;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // repeated .rsb.protocol.EventId causes = 13;
  inline int causes_size() const;
  inline void clear_causes();
  static const int kCausesFieldNumber = 13;
  inline const ::rsb::protocol::EventId& causes(int index) const;
  inline ::rsb::protocol::EventId* mutable_causes(int index);
  inline ::rsb::protocol::EventId* add_causes();
  inline const ::google::protobuf::RepeatedPtrField< ::rsb::protocol::EventId >&
      causes() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsb::protocol::EventId >*
      mutable_causes();

  // optional .rsb.protocol.EventMetaData meta_data = 15;
  inline bool has_meta_data() const;
  inline void clear_meta_data();
  static const int kMetaDataFieldNumber = 15;
  inline const ::rsb::protocol::EventMetaData& meta_data() const;
  inline ::rsb::protocol::EventMetaData* mutable_meta_data();
  inline ::rsb::protocol::EventMetaData* release_meta_data();
  inline void set_allocated_meta_data(::rsb::protocol::EventMetaData* meta_data);

  // @@protoc_insertion_point(class_scope:rsb.protocol.Notification)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_scope();
  inline void clear_has_scope();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_wire_schema();
  inline void clear_has_wire_schema();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_meta_data();
  inline void clear_has_meta_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rsb::protocol::EventId* event_id_;
  ::std::string* scope_;
  ::std::string* method_;
  ::std::string* wire_schema_;
  ::std::string* data_;
  ::google::protobuf::RepeatedPtrField< ::rsb::protocol::EventId > causes_;
  ::rsb::protocol::EventMetaData* meta_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void RSB_PROTOCOL_EXPORT protobuf_AddDesc_rsb_2fprotocol_2fNotification_2eproto();
  friend void protobuf_AssignDesc_rsb_2fprotocol_2fNotification_2eproto();
  friend void protobuf_ShutdownFile_rsb_2fprotocol_2fNotification_2eproto();

  void InitAsDefaultInstance();
  static Notification* default_instance_;
};
// ===================================================================


// ===================================================================

// Notification

// required .rsb.protocol.EventId event_id = 108;
inline bool Notification::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notification::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notification::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notification::clear_event_id() {
  if (event_id_ != NULL) event_id_->::rsb::protocol::EventId::Clear();
  clear_has_event_id();
}
inline const ::rsb::protocol::EventId& Notification::event_id() const {
  return event_id_ != NULL ? *event_id_ : *default_instance_->event_id_;
}
inline ::rsb::protocol::EventId* Notification::mutable_event_id() {
  set_has_event_id();
  if (event_id_ == NULL) event_id_ = new ::rsb::protocol::EventId;
  return event_id_;
}
inline ::rsb::protocol::EventId* Notification::release_event_id() {
  clear_has_event_id();
  ::rsb::protocol::EventId* temp = event_id_;
  event_id_ = NULL;
  return temp;
}
inline void Notification::set_allocated_event_id(::rsb::protocol::EventId* event_id) {
  delete event_id_;
  event_id_ = event_id;
  if (event_id) {
    set_has_event_id();
  } else {
    clear_has_event_id();
  }
}

// optional bytes scope = 6;
inline bool Notification::has_scope() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notification::set_has_scope() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notification::clear_has_scope() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notification::clear_scope() {
  if (scope_ != &::google::protobuf::internal::kEmptyString) {
    scope_->clear();
  }
  clear_has_scope();
}
inline const ::std::string& Notification::scope() const {
  return *scope_;
}
inline void Notification::set_scope(const ::std::string& value) {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  scope_->assign(value);
}
inline void Notification::set_scope(const char* value) {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  scope_->assign(value);
}
inline void Notification::set_scope(const void* value, size_t size) {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  scope_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_scope() {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  return scope_;
}
inline ::std::string* Notification::release_scope() {
  clear_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scope_;
    scope_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notification::set_allocated_scope(::std::string* scope) {
  if (scope_ != &::google::protobuf::internal::kEmptyString) {
    delete scope_;
  }
  if (scope) {
    set_has_scope();
    scope_ = scope;
  } else {
    clear_has_scope();
    scope_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes method = 14 [default = ""];
inline bool Notification::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Notification::set_has_method() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Notification::clear_has_method() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Notification::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& Notification::method() const {
  return *method_;
}
inline void Notification::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Notification::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Notification::set_method(const void* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* Notification::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notification::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes wire_schema = 7;
inline bool Notification::has_wire_schema() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Notification::set_has_wire_schema() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Notification::clear_has_wire_schema() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Notification::clear_wire_schema() {
  if (wire_schema_ != &::google::protobuf::internal::kEmptyString) {
    wire_schema_->clear();
  }
  clear_has_wire_schema();
}
inline const ::std::string& Notification::wire_schema() const {
  return *wire_schema_;
}
inline void Notification::set_wire_schema(const ::std::string& value) {
  set_has_wire_schema();
  if (wire_schema_ == &::google::protobuf::internal::kEmptyString) {
    wire_schema_ = new ::std::string;
  }
  wire_schema_->assign(value);
}
inline void Notification::set_wire_schema(const char* value) {
  set_has_wire_schema();
  if (wire_schema_ == &::google::protobuf::internal::kEmptyString) {
    wire_schema_ = new ::std::string;
  }
  wire_schema_->assign(value);
}
inline void Notification::set_wire_schema(const void* value, size_t size) {
  set_has_wire_schema();
  if (wire_schema_ == &::google::protobuf::internal::kEmptyString) {
    wire_schema_ = new ::std::string;
  }
  wire_schema_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_wire_schema() {
  set_has_wire_schema();
  if (wire_schema_ == &::google::protobuf::internal::kEmptyString) {
    wire_schema_ = new ::std::string;
  }
  return wire_schema_;
}
inline ::std::string* Notification::release_wire_schema() {
  clear_has_wire_schema();
  if (wire_schema_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wire_schema_;
    wire_schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notification::set_allocated_wire_schema(::std::string* wire_schema) {
  if (wire_schema_ != &::google::protobuf::internal::kEmptyString) {
    delete wire_schema_;
  }
  if (wire_schema) {
    set_has_wire_schema();
    wire_schema_ = wire_schema;
  } else {
    clear_has_wire_schema();
    wire_schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes data = 9;
inline bool Notification::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Notification::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Notification::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Notification::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Notification::data() const {
  return *data_;
}
inline void Notification::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Notification::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Notification::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Notification::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notification::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .rsb.protocol.EventId causes = 13;
inline int Notification::causes_size() const {
  return causes_.size();
}
inline void Notification::clear_causes() {
  causes_.Clear();
}
inline const ::rsb::protocol::EventId& Notification::causes(int index) const {
  return causes_.Get(index);
}
inline ::rsb::protocol::EventId* Notification::mutable_causes(int index) {
  return causes_.Mutable(index);
}
inline ::rsb::protocol::EventId* Notification::add_causes() {
  return causes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsb::protocol::EventId >&
Notification::causes() const {
  return causes_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsb::protocol::EventId >*
Notification::mutable_causes() {
  return &causes_;
}

// optional .rsb.protocol.EventMetaData meta_data = 15;
inline bool Notification::has_meta_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Notification::set_has_meta_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Notification::clear_has_meta_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Notification::clear_meta_data() {
  if (meta_data_ != NULL) meta_data_->::rsb::protocol::EventMetaData::Clear();
  clear_has_meta_data();
}
inline const ::rsb::protocol::EventMetaData& Notification::meta_data() const {
  return meta_data_ != NULL ? *meta_data_ : *default_instance_->meta_data_;
}
inline ::rsb::protocol::EventMetaData* Notification::mutable_meta_data() {
  set_has_meta_data();
  if (meta_data_ == NULL) meta_data_ = new ::rsb::protocol::EventMetaData;
  return meta_data_;
}
inline ::rsb::protocol::EventMetaData* Notification::release_meta_data() {
  clear_has_meta_data();
  ::rsb::protocol::EventMetaData* temp = meta_data_;
  meta_data_ = NULL;
  return temp;
}
inline void Notification::set_allocated_meta_data(::rsb::protocol::EventMetaData* meta_data) {
  delete meta_data_;
  meta_data_ = meta_data;
  if (meta_data) {
    set_has_meta_data();
  } else {
    clear_has_meta_data();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace rsb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rsb_2fprotocol_2fNotification_2eproto__INCLUDED
