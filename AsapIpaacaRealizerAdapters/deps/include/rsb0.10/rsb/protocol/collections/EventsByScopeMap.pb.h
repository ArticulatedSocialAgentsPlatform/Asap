// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rsb/protocol/collections/EventsByScopeMap.proto

#ifndef PROTOBUF_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto__INCLUDED
#define PROTOBUF_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rsb/protocol/Notification.pb.h"
// @@protoc_insertion_point(includes)

namespace rsb {
namespace protocol {
namespace collections {

// Internal implementation detail -- do not call these.
void RSB_PROTOCOL_EXPORT protobuf_AddDesc_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto();
void protobuf_AssignDesc_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto();
void protobuf_ShutdownFile_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto();

class EventsByScopeMap;
class EventsByScopeMap_ScopeSet;

// ===================================================================

class RSB_PROTOCOL_EXPORT EventsByScopeMap_ScopeSet : public ::google::protobuf::Message {
 public:
  EventsByScopeMap_ScopeSet();
  virtual ~EventsByScopeMap_ScopeSet();

  EventsByScopeMap_ScopeSet(const EventsByScopeMap_ScopeSet& from);

  inline EventsByScopeMap_ScopeSet& operator=(const EventsByScopeMap_ScopeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventsByScopeMap_ScopeSet& default_instance();

  void Swap(EventsByScopeMap_ScopeSet* other);

  // implements Message ----------------------------------------------

  EventsByScopeMap_ScopeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventsByScopeMap_ScopeSet& from);
  void MergeFrom(const EventsByScopeMap_ScopeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes scope = 1;
  inline bool has_scope() const;
  inline void clear_scope();
  static const int kScopeFieldNumber = 1;
  inline const ::std::string& scope() const;
  inline void set_scope(const ::std::string& value);
  inline void set_scope(const char* value);
  inline void set_scope(const void* value, size_t size);
  inline ::std::string* mutable_scope();
  inline ::std::string* release_scope();
  inline void set_allocated_scope(::std::string* scope);

  // repeated .rsb.protocol.Notification notifications = 2;
  inline int notifications_size() const;
  inline void clear_notifications();
  static const int kNotificationsFieldNumber = 2;
  inline const ::rsb::protocol::Notification& notifications(int index) const;
  inline ::rsb::protocol::Notification* mutable_notifications(int index);
  inline ::rsb::protocol::Notification* add_notifications();
  inline const ::google::protobuf::RepeatedPtrField< ::rsb::protocol::Notification >&
      notifications() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsb::protocol::Notification >*
      mutable_notifications();

  // @@protoc_insertion_point(class_scope:rsb.protocol.collections.EventsByScopeMap.ScopeSet)
 private:
  inline void set_has_scope();
  inline void clear_has_scope();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* scope_;
  ::google::protobuf::RepeatedPtrField< ::rsb::protocol::Notification > notifications_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void RSB_PROTOCOL_EXPORT protobuf_AddDesc_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto();
  friend void protobuf_AssignDesc_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto();
  friend void protobuf_ShutdownFile_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto();

  void InitAsDefaultInstance();
  static EventsByScopeMap_ScopeSet* default_instance_;
};
// -------------------------------------------------------------------

class RSB_PROTOCOL_EXPORT EventsByScopeMap : public ::google::protobuf::Message {
 public:
  EventsByScopeMap();
  virtual ~EventsByScopeMap();

  EventsByScopeMap(const EventsByScopeMap& from);

  inline EventsByScopeMap& operator=(const EventsByScopeMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventsByScopeMap& default_instance();

  void Swap(EventsByScopeMap* other);

  // implements Message ----------------------------------------------

  EventsByScopeMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventsByScopeMap& from);
  void MergeFrom(const EventsByScopeMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EventsByScopeMap_ScopeSet ScopeSet;

  // accessors -------------------------------------------------------

  // repeated .rsb.protocol.collections.EventsByScopeMap.ScopeSet sets = 1;
  inline int sets_size() const;
  inline void clear_sets();
  static const int kSetsFieldNumber = 1;
  inline const ::rsb::protocol::collections::EventsByScopeMap_ScopeSet& sets(int index) const;
  inline ::rsb::protocol::collections::EventsByScopeMap_ScopeSet* mutable_sets(int index);
  inline ::rsb::protocol::collections::EventsByScopeMap_ScopeSet* add_sets();
  inline const ::google::protobuf::RepeatedPtrField< ::rsb::protocol::collections::EventsByScopeMap_ScopeSet >&
      sets() const;
  inline ::google::protobuf::RepeatedPtrField< ::rsb::protocol::collections::EventsByScopeMap_ScopeSet >*
      mutable_sets();

  // @@protoc_insertion_point(class_scope:rsb.protocol.collections.EventsByScopeMap)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rsb::protocol::collections::EventsByScopeMap_ScopeSet > sets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void RSB_PROTOCOL_EXPORT protobuf_AddDesc_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto();
  friend void protobuf_AssignDesc_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto();
  friend void protobuf_ShutdownFile_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto();

  void InitAsDefaultInstance();
  static EventsByScopeMap* default_instance_;
};
// ===================================================================


// ===================================================================

// EventsByScopeMap_ScopeSet

// required bytes scope = 1;
inline bool EventsByScopeMap_ScopeSet::has_scope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventsByScopeMap_ScopeSet::set_has_scope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventsByScopeMap_ScopeSet::clear_has_scope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventsByScopeMap_ScopeSet::clear_scope() {
  if (scope_ != &::google::protobuf::internal::kEmptyString) {
    scope_->clear();
  }
  clear_has_scope();
}
inline const ::std::string& EventsByScopeMap_ScopeSet::scope() const {
  return *scope_;
}
inline void EventsByScopeMap_ScopeSet::set_scope(const ::std::string& value) {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  scope_->assign(value);
}
inline void EventsByScopeMap_ScopeSet::set_scope(const char* value) {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  scope_->assign(value);
}
inline void EventsByScopeMap_ScopeSet::set_scope(const void* value, size_t size) {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  scope_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventsByScopeMap_ScopeSet::mutable_scope() {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  return scope_;
}
inline ::std::string* EventsByScopeMap_ScopeSet::release_scope() {
  clear_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scope_;
    scope_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventsByScopeMap_ScopeSet::set_allocated_scope(::std::string* scope) {
  if (scope_ != &::google::protobuf::internal::kEmptyString) {
    delete scope_;
  }
  if (scope) {
    set_has_scope();
    scope_ = scope;
  } else {
    clear_has_scope();
    scope_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .rsb.protocol.Notification notifications = 2;
inline int EventsByScopeMap_ScopeSet::notifications_size() const {
  return notifications_.size();
}
inline void EventsByScopeMap_ScopeSet::clear_notifications() {
  notifications_.Clear();
}
inline const ::rsb::protocol::Notification& EventsByScopeMap_ScopeSet::notifications(int index) const {
  return notifications_.Get(index);
}
inline ::rsb::protocol::Notification* EventsByScopeMap_ScopeSet::mutable_notifications(int index) {
  return notifications_.Mutable(index);
}
inline ::rsb::protocol::Notification* EventsByScopeMap_ScopeSet::add_notifications() {
  return notifications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsb::protocol::Notification >&
EventsByScopeMap_ScopeSet::notifications() const {
  return notifications_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsb::protocol::Notification >*
EventsByScopeMap_ScopeSet::mutable_notifications() {
  return &notifications_;
}

// -------------------------------------------------------------------

// EventsByScopeMap

// repeated .rsb.protocol.collections.EventsByScopeMap.ScopeSet sets = 1;
inline int EventsByScopeMap::sets_size() const {
  return sets_.size();
}
inline void EventsByScopeMap::clear_sets() {
  sets_.Clear();
}
inline const ::rsb::protocol::collections::EventsByScopeMap_ScopeSet& EventsByScopeMap::sets(int index) const {
  return sets_.Get(index);
}
inline ::rsb::protocol::collections::EventsByScopeMap_ScopeSet* EventsByScopeMap::mutable_sets(int index) {
  return sets_.Mutable(index);
}
inline ::rsb::protocol::collections::EventsByScopeMap_ScopeSet* EventsByScopeMap::add_sets() {
  return sets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rsb::protocol::collections::EventsByScopeMap_ScopeSet >&
EventsByScopeMap::sets() const {
  return sets_;
}
inline ::google::protobuf::RepeatedPtrField< ::rsb::protocol::collections::EventsByScopeMap_ScopeSet >*
EventsByScopeMap::mutable_sets() {
  return &sets_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace collections
}  // namespace protocol
}  // namespace rsb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rsb_2fprotocol_2fcollections_2fEventsByScopeMap_2eproto__INCLUDED
