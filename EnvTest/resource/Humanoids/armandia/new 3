opsplitsen environment
documenteren generieke gedeelte
naar de engines verhuizen van de verschillende loaders?
tussenvoegen van een skeleton-naar-mixedskeleton-embodiment-loader



HERNOEMEN DIVERSE KLASSES!

 scheiding tussen laoders en de resulterende data, voor de begrijpelijkheid!

Rename realizerbridge into realizerport where possible
(same for pipes etc)

=================================
interfaces:
- Engine       (HmiElckerlyc)
- Embodiment   (HmiEnvironment)
- Environment  (HmiEnvironment)

- CopyEmbodiment(HmiEnvironment)


AsapEnvironment
- remove all dependencies on: animation, physics, graphics, loader impl, face engine, other engines, ...


AsapVirtualHuman(Loader) to load and collect all embodiments and engines
    - main access point for loading the VHSpec file into a complete VH setup
    - default engines (always present) (activate, pvc, interrupt, waitengine)
    

AsapRealizerSystem(Loader) (was: ElckerlycRealizerLoader) to load the realizer settings and construct the realizer
Merged into vhloader
    - realizer, parser, scheduler options
    - pipes (e.g. loggers) and adapters (e.g. server)

    
SoundManager?
    
Routing of behaviors section?

Implement the trick with the special type of engine that does not loop through engine.play() to player.play() but instead to player.verifyTimeProgress(), to get rid of the playableengines construction

Het soundsystem moet hieruit gevist worden! evt de TTSEngine afhankelijk maken van de AudioEngine? Of een AudioEnvironment maken! dat is beter denk ik.

----- Swing GUI ----------------

GUI section

jcomponent stuff (env & emb) voor GUI zaken -- in core, want alle loaders moeten desgewenst toegang hebben tot zo'n emb/env om gui dingen op toe te voegen?
Later kan het JComponent swing based spul gedupliceerd worden voor een andere GUI library (QT? iets wat ook op android werkt?)

Maar waar moeten alle UI elementen -- wel of niet in de betreffende loader sectie? als wel, waarom is het nu dan anders voor de realizersystemloader? stel we gaan een Android UI implementeren -- willen we dan in de Android ui component alles maken, of alle engineloaders en embodimentloaders aanpassen zodat ze naast Swing ook Android GUI zaken aankunnen? 
--------------------------

mixedanimenv:
uit animengine halen:
- anmimplayermanager
- physicscallback 
-

uit hmiphysics:
- mixedanimationplayer

==================================
renderenv

nog een module invoegen: mpeg4embodiments? oh wacht die kan in faceanimation... dus embodiment moet naar hmiutil. en skeletonembodiment in hmianimation. en mixedskeletonembodiment naar hmiphysics

=================================
PhysicsEnvironment stuff

comes before mixedanimationenvironment?

Uittekenen van alle samenhang in deze environment, die toch best lastig is.

dependency van animatino eruit slopen!!!



=================================
Mixed Animation environments: in HmiAnimationEngine?

OdePhysicsEnvironment
HmiMixedAnimationEnv --- concerns (mixed)animationengines and (mixed)skeletonembodiments
AsapMixedAnimationEnv --- of kan dat gewoon met hmimixedanimationenvironment? waarschijnlijk wel!!! Maar die moet dan in HmiPhysics komen?

animationengines

=================================
Hmi Graphics / rendering stuff

HmiRenderEnv

---------------------------------




audioengine
hmi(mixed)animationengine
asapanimationengine
textengine
speechengine






reinstate debug visualisations (!)
---> in renderenvironment, addVJointDebug(rootid) addphysicsdebug(rootid, physicalmodel) etc


glscenes moet ook een hashmap over de id's worden

split mpeg4embodiment and morphembodiment? NEE

rename mpeg4embodiment to faceembodiment...

todo from graphicsenv:
- shutdown code
- play and pause button connected to render play and pause (clearly mark play/pause RENDERING)

- dispose moet nog van graphics en physics environment overgenomen


- ElckerlycEnvironment -> responsible for collecting multiple environments, embodiments, engines, and combining everything?

- and then: what is the typical class that creates a number of environments, adds them to each other, makes a JFrame, etc? this is the class that will take initEnvironment from the old elckerlycenvironment class...


- can we have a nonmixedanimationenvironment? (for randy, no animationenvironment at all. For Merel, ditto)

renderembodimentloaders must not forget to add and remove the copyembodiments from the renderenvironment (for now, only for the face...)




junittests: compileren en runnen.
--- laatste 2 envtests (10x maken en breken van render en physics envs) weer resurrecten!

NAAR EMYS KIJKEN

SHUTDOWN THROUGHOUT
CLOSING THE SCHEDULER>>>>NO MORE BML!
CREATING SIMPLE OBJECTS IN RENDERENV // RESURRECT BLUE BOX 
DEBUG VISUALISATIONS

op laptop over naar git?

CHECK FIX MULTIPLE VHs IN ONE ENV!
LOAD guilermo's room?

- in HmiDemo: SIMPLIFIED NABAZTAG (no new BML, just demo of making a new planner and units and binding)
- in HmiDemo: SIMPLE EXAMPLE FOR NEW BML (without new engine... just new behavior for animationengine?)
- in HmiDemo: meer? zie intetain paper?
- in HmiDemo: is daar al een goede aniticpatordemo?

EMITTERENGINE
- no more persistence! how does this work - shouldn't this be approximately like with the instantaneous parameter changes

HmiEnviornment: de laatste 2 tests naar de juiste modules verplaatsen (en herschrijven!)

DOCU:

- engines zijn afh van env, asaputils, en elck
- envs zijn NIET afh van elckerlyc (!!)
- bijna iedereen is afhankelijk van asaputils :) dus houdt die klein 

- schrijf git-in-eclipse demo

- DOCUMENT THE CRAZY LOMBOK ISSUE!! lombok must be in clean path, not in program files (86)